import sys
from pathlib import Path
from flask import Flask, jsonify, request, send_from_directory, Response
from flask_restful import Api, Resource
from flask_swagger_ui import get_swaggerui_blueprint
from flask_cors import CORS
import logging
import subprocess
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

api = Api(app)

# Swagger UI configuration
SWAGGER_URL = '/swagger-ui'
API_URL = '/static/swagger.json'  # Path to the Swagger JSON file

swaggerui_blueprint = get_swaggerui_blueprint(
    SWAGGER_URL,
    API_URL,
    config={
        'app_name': "WrapperJSON API"
    }
)

app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)

# Define the root project directory
root_dir = Path(__file__).resolve().parents[3]
sys.path.append(str(root_dir))

from BackEnd.Wrappers.Wrapper_JSON import process_json


class WrapperJSONExecute(Resource):
    """
    WrapperJSONExecute is a Flask-RESTful resource that handles the execution of a data transformation script to JSON.

    Methods
    -------
    post():
        Executes the main.py script with the 'json' argument and handles any subprocess errors.
    """

    def post(self):
        """
        Executes the main.py script with the 'json' argument using python3 or py command.

        This method attempts to run the main.py script located in the root directory of the project with the 'json' argument.
        If the python3 command fails, it tries to execute the script using the py command. If both commands fail, it returns
        an error response.

        Returns
        -------
        dict
            A dictionary containing an error message if the subprocess fails.
        int
            HTTP status code 500 if the subprocess fails.
        """
        # Execute the Wrapper_JSON.py 
        process_json()
        
        # Define the path to the output file
        output_file_path = root_dir / 'Resultados' / 'JSONtoJSON_con_coords.json'
        
        # Print the path to the output file for debugging purposes
        print("Path to output file:", output_file_path)
        
        # Read the output file and return its contents
        try:
            with open(output_file_path, 'r', encoding='utf-8') as output_file:
                output_data = output_file.read()
            return Response(output_data, mimetype='application/json', status=201)
        except FileNotFoundError:
            return {"error": "Output file not found"}, 404
        except Exception as e:
            return {"error": f"An error occurred while reading the output file: {e}"}, 500

    def delete(self):
        """
        Deletes the output JSON file generated by the data transformation script.

        This method attempts to delete the output JSON file located in the 'Resultados' directory. If the file is not found,
        it returns a 404 error response. If any other error occurs, it returns a 500 error response.

        Returns
        -------
        dict
            A dictionary containing a success message if the file is deleted successfully, or an error message if the file
            is not found or another error occurs.
        int
            HTTP status code 200 if the file is deleted successfully, 404 if the file is not found, or 500 if another error occurs.
        """
        output_file_path = root_dir / 'Resultados' / 'JSONtoJSON_con_coords.json'
        try:
            os.remove(output_file_path)
            return {"message": "Output file deleted successfully"}
        except FileNotFoundError:
            return {"error": "Output file not found"}, 404
        except Exception as e:
            return {"error": f"An error occurred while deleting the output file: {e}"}, 500

class WrapperJSONLog(Resource):
    """
    WrapperJSONLog es un recurso Flask-RESTful que maneja la obtención y eliminación de archivos de log.
    """
    
    def get(self, tipo=None):
        """
        Obtiene el contenido del archivo de log según el tipo especificado.
        """
        if tipo == "estadisticas":
            log_file_path = root_dir / 'Resultados' / 'log-json' / 'log-estadisticas-json.log'
        elif tipo == "rechazados":
            log_file_path = root_dir / 'Resultados' / 'log-json' / 'log-rechazados-json.log'
        elif tipo == "reparados":
            log_file_path = root_dir / 'Resultados' / 'log-json' / 'log-reparados-json.log'
        else:
            return {"error": "Tipo de log no válido"}, 400

        try:
            with open(log_file_path, 'r', encoding='latin-1') as log_file:
                log_data = log_file.read()
            return Response(log_data, mimetype='text/plain', status='200')
        except FileNotFoundError:
            return {"error": f"Log de {tipo} no encontrado"}, 404
        except Exception as e:
            return {"error": f"Error al leer el log de {tipo}: {e}"}, 500

    def delete(self, tipo=None):
        """
        Elimina el archivo de log según el tipo especificado.
        """
        if tipo == "estadisticas":
            log_file_path = root_dir / 'Resultados' / 'log-json' / 'log-estadisticas-json.log'
        elif tipo == "rechazados":
            log_file_path = root_dir / 'Resultados' / 'log-json' / 'log-rechazados-json.log'
        elif tipo == "reparados":
            log_file_path = root_dir / 'Resultados' / 'log-json' / 'log-reparados-json.log'
        elif tipo is None:
            # Eliminar todos los logs
            try:
                for log_type in ["estadisticas", "rechazados", "reparados"]:
                    path = root_dir / 'Resultados' / 'log-json' / f'log-{log_type}-json.log'
                    if path.exists():
                        os.remove(path)
                return {"message": "Todos los archivos de log han sido eliminados exitosamente"}
            except Exception as e:
                return {"error": f"Error al eliminar los archivos de log: {e}"}, 500
        else:
            return {"error": "Tipo de log no válido"}, 400

        try:
            if log_file_path.exists():
                os.remove(log_file_path)
            return {"message": f"Log de {tipo} eliminado exitosamente"}
        except Exception as e:
            return {"error": f"Error al eliminar el log de {tipo}: {e}"}, 500

# Añadir las rutas para los endpoints de log
api.add_resource(WrapperJSONLog, 
                '/wrapperJSON/log/<string:tipo>',
                '/wrapperJSON/log',
                endpoint='json_log')

# Add the resources to the API
api.add_resource(WrapperJSONExecute, '/wrapperJSON/execute')

if __name__ == '__main__':
    print("\n" + "="*50)
    print("API WrapperJSON iniciada exitosamente!")
    print("="*50)
    print("\nDocumentación disponible en:")
    print("  → http://localhost:8082/swagger-ui")
    print("\nEndpoints disponibles:")
    print("  → POST   http://localhost:8082/wrapperJSON/execute")
    print("  → GET    http://localhost:8082/wrapperJSON/log/estadisticas")
    print("  → DELETE http://localhost:8082/wrapperJSON/log/estadisticas")
    print("  → GET    http://localhost:8082/wrapperJSON/log/rechazados")
    print("  → DELETE http://localhost:8082/wrapperJSON/log/rechazados")
    print("  → GET    http://localhost:8082/wrapperJSON/log/reparados")
    print("  → DELETE http://localhost:8082/wrapperJSON/log/reparados")
    print("  → DELETE http://localhost:8082/wrapperJSON/log")
    print("\nPresiona Ctrl+C para detener el servidor")
    print("="*50 + "\n")
    app.run(debug=True, host='localhost', port=8082)