import json
import sys
from pathlib import Path
from collections import OrderedDict

# Define the root project directory and add it to Python path
root_dir = Path(__file__).resolve().parents[3]
sys.path.append(str(root_dir))

from flask import Flask, jsonify, request, send_from_directory, Response
from flask_restful import Api, Resource
from flask_swagger_ui import get_swaggerui_blueprint
from flask_cors import CORS
import subprocess
import os
from BackEnd.utils.Otros import data_source
from BackEnd.Wrappers.Wrapper_JSON import process_json
from BackEnd.Wrappers.WrapperJSON import JSONtoJSON

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

api = Api(app)

# Swagger UI configuration
SWAGGER_URL = '/swagger-ui'
API_URL = '/static/swagger.json'  # Path to the Swagger JSON file

swaggerui_blueprint = get_swaggerui_blueprint(
    SWAGGER_URL,
    API_URL,
    config={
        'app_name': "WrapperJSON API"
    }
)

app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)

class WrapperJSONExecute(Resource):
    """
    WrapperJSONExecute is a Flask-RESTful resource that handles the execution of a data transformation script to JSON.
    """

    def post(self):  
        try:
            # Ruta al archivo JSON que deseas devolver
            root_dir = Path(__file__).resolve().parents[3]

            # Define the path to the output JSON file
            path = root_dir / 'Fuentes_de_datos' / 'Final' / 'eus.json'

            # Leer el archivo como texto primero para procesar manualmente las claves duplicadas
            with open(path, 'r', encoding='utf-8') as json_file:
                content = json_file.read()
                # Dividir el contenido en líneas y procesar cada línea
                lines = content.split('\n')
                processed_data = []
                current_item = {}
                field_values = {}

                for line in lines:
                    line = line.strip()
                    if '"' in line and ':' in line:
                        # Extraer clave y valor
                        key = line.split('"')[1]
                        value = line.split(':')[1].strip().strip(',').strip('"')
                        if key not in field_values:
                            field_values[key] = value
                            current_item[key] = value
                        elif not field_values[key] and value:
                            field_values[key] = value
                            current_item[key] = value

                    elif line == '}':
                        if current_item:
                            processed_data.append(current_item)
                        current_item = {}
                        field_values = {}

            # Convertir de nuevo a JSON con encoding UTF-8
            response_data = json.dumps(processed_data, ensure_ascii=False)

            # Asegurarse de que la respuesta también sea con UTF-8
            return Response(response_data, mimetype='application/json', status=200)

        except FileNotFoundError:
            return {"error": "Output file not found"}, 404
        except Exception as e:
            return {"error": f"An error occurred while reading the output file: {e}"}, 500

    def delete(self):
        """
        Deletes the output JSON file generated by the data transformation script.
        """
        output_file_path = root_dir / 'BackEnd' / 'Wrappers' / 'JSONtoJSON.json'
        try:
            os.remove(output_file_path)
            return {"message": "Output file deleted successfully"}
        except FileNotFoundError:
            return {"error": "Output file not found"}, 404
        except Exception as e:
            return {"error": f"An error occurred while deleting the output file: {e}"}, 500

# Add the resources to the API
api.add_resource(WrapperJSONExecute, '/wrapperJSON/execute')

if __name__ == '__main__':
    print("\n" + "="*50)
    print("API WrapperJSON iniciada exitosamente!")
    print("="*50)
    print("\nDocumentación disponible en:")
    print("  → http://localhost:8082/swagger-ui")
    print("\nEndpoints disponibles:")
    print("  → POST   http://localhost:8082/wrapperJSON/execute")
    print("\nPresiona Ctrl+C para detener el servidor")
    print("="*50 + "\n")
    app.run(debug=True, host='localhost', port=8082)