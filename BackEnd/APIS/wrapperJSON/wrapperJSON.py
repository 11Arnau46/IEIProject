import json
import sys
from pathlib import Path
from collections import OrderedDict

# Define the root project directory and add it to Python path
root_dir = Path(__file__).resolve().parents[3]
sys.path.append(str(root_dir))

from flask import Flask, jsonify, request, send_from_directory, Response
from flask_restful import Api, Resource
from flask_swagger_ui import get_swaggerui_blueprint
from flask_cors import CORS
import subprocess
import os
from BackEnd.utils.Otros import data_source
from BackEnd.Wrappers.Wrapper_JSON import process_json
from BackEnd.Wrappers.WrapperJSON import JSONtoJSON

# Inicializar Flask con la ruta correcta para archivos estáticos
static_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')
app = Flask(__name__, static_url_path='', static_folder=static_folder)

# Configurar CORS
CORS(app, resources={
    r"/static/*": {"origins": "*"},
    r"/swagger-ui/*": {"origins": "*"},
    r"/wrapperJSON/*": {"origins": "*"}
})

api = Api(app)

# Swagger UI configuration
SWAGGER_URL = '/swagger-ui'
API_URL = '/swagger.json'

swaggerui_blueprint = get_swaggerui_blueprint(
    SWAGGER_URL,
    API_URL,
    config={
        'app_name': "WrapperJSON API"
    }
)

app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)

@app.route('/swagger.json')
def serve_swagger():
    return send_from_directory(static_folder, 'swagger.json')

class WrapperJSONExecute(Resource):
    """
    WrapperJSONExecute is a Flask-RESTful resource that handles the execution of a data transformation script to JSON.
    """

    def post(self):  
        try:
            # Procesar el JSON usando la función del wrapper
            JSONtoJSON()

            # Leer el archivo JSONtoJSON.json generado
            output_file_path = os.path.join(root_dir, 'BackEnd', 'Wrappers', 'JSONtoJSON.json')
            with open(output_file_path, 'r', encoding='utf-8') as f:
                json_content = json.load(f)

            # Devolver el contenido del archivo
            return jsonify(json_content)

        except FileNotFoundError:
            return {"error": "Output file not found"}, 404
        except Exception as e:
            return {"error": f"An error occurred while processing the file: {e}"}, 500

    def delete(self):
        """
        Deletes the output JSON file generated by the data transformation script.
        """
        output_file_path = root_dir / 'BackEnd' / 'Wrappers' / 'JSONtoJSON.json'
        try:
            os.remove(output_file_path)
            return {"message": "Output file deleted successfully"}
        except FileNotFoundError:
            return {"error": "Output file not found"}, 404
        except Exception as e:
            return {"error": f"An error occurred while deleting the output file: {e}"}, 500

# Add the resources to the API
api.add_resource(WrapperJSONExecute, '/wrapperJSON/execute')

if __name__ == '__main__':
    print("\n" + "="*50)
    print("API WrapperJSON iniciada exitosamente!")
    print("="*50)
    print("\nDocumentación disponible en:")
    print("  → http://localhost:8082/swagger-ui")
    print("\nEndpoints disponibles:")
    print("  → POST   http://localhost:8082/wrapperJSON/execute")
    print("\nPresiona Ctrl+C para detener el servidor")
    print("="*50 + "\n")
    app.run(debug=True, host='localhost', port=8082)